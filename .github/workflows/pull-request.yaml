name: Pull Request

on: [pull_request]

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v2
    - uses: pre-commit/action@v2.0.3

  comment:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - id: template
      run: |
        : Template File
        cat>.comment.md<<END_OF_COMMENT
        CI/CD Comment Test
        | Issue | Submitter  |
        |:-----:|------------|
        |${{ github.event.pull_request.number }} | ${{ github.event.pull_request.user.login }} |
        END_OF_COMMENT

    - id: post
      run: |
        : Post Comment
        printf '\n:heavy_check_mark: Posted: %s\n' "$(date -u)" >> '.comment.md'
        sh gh-comment-action.sh --comment-id 'comment-test' '.comment.md' "${{ github.event.pull_request.number }}"

    - id: update
      run: |
        : Update Comment
        printf '\n:heavy_check_mark: Updated: %s\n' "$(date -u)" >> '.comment.md'
        sh gh-comment-action.sh --comment-id 'comment-test' '.comment.md' "${{ github.event.pull_request.number }}"

    - id: upload
      uses: actions/upload-artifact@v3
      with:
        name: comment
        path: .comment.md

  issue-resolution:
    name: Validate Issue Resolution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - id: issue-resolution
      shell: sh
      run: |
        : Validate commit is resolving an issue
        die() { echo "::error:: $*"; exit 1; }
        commit_log='/tmp/git-commit-message.log'
        set -- $(gh api "repos/{owner}/{repo}/pulls/${{ github.event.pull_request.number }}/commits" --jq '.[].sha')
        git fetch "--deepen=${#}" || :
        for sha; do
          # Passing through `tac` twice will strip trailing newlines
          echo "$(echo "$(git show -s --format='%s%n%n%b' "${sha}" | tac)" | tac)" > "${commit_log}"
          title="$(head -n 1 < "${commit_log}")"
          message="$(tail -n +2 < "${commit_log}")"
          type="$(printf '%s' "${title}" | awk -F ':' '{print$1}')"
          test -n "${type}" || die "${sha}: title missing 'type' prefix"
          case "${type}" in
          (fix|hotfix)  type='fix';;
          (*)           type='close';;
          esac
          footer="$(echo "$(echo "${message}" | tac | grep -B9000 -m1 '^$' | tac)" | grep -v '^$')"
          test -n "${footer}" || die "${sha}: missing commit message footer"
          for resolution in $(printf '%s' "${footer}" | awk -F ':' '/^(Fix(e[sd])?|Close[sd]?)/{print$1}'); do
            case "${resolution}" in
            ([Ff]ix|[Ff]ixe[sd]) resolution='fix';;
            ([Cc]lose[sd]?)      resolution='close';;
            (*)                  die "${sha}: no valid issue resolution found in commit message footer";;
            esac
            test "${type}" = "${resolution}" || die "${sha}: invalid resolution type '${type}'"
          done
        done

  issue-status:
    name: Validate Open Issue
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - id: issue-status
      shell: sh
      run: |
        : Validate closed issues are in an open state
        commit_log='/tmp/git-commit-message.log'
        die() { echo "::error:: $*"; exit 1; }
        set -- $(gh api "repos/{owner}/{repo}/pulls/${{ github.event.pull_request.number }}/commits" --jq '.[].sha')
        git fetch --deepen=${#} || :
        for sha; do
          # Passing through `tac` twice will strip trailing newlines
          echo "$(echo "$(git show -s --format='%s%n%n%b' "${sha}" | tac)" | tac)" > "${commit_log}"
          message="$(tail -n +2 < "${commit_log}")"
          footer="$(echo "$(echo "${message}" | tac | grep -B9000 -m1 '^$' | tac)" | grep -v '^$')"
          test -n "${footer}" || die "${sha}: missing commit message footer"
          footer="$(printf '%s' "${footer}" | sed -e 's,#,,g' -e 's/,/ /g')"
          set --
          set -- "${@}" $(printf '%s' "${footer}" | grep -Po '(?<=[Ff]ixe[sd]:\s).+')
          set -- "${@}" $(printf '%s' "${footer}" | grep -Po '(?<=[Ff]ix:\s).+')
          set -- "${@}" $(printf '%s' "${footer}" | grep -Po '(?<=Close:\s).+')
          set -- "${@}" $(printf '%s' "${footer}" | grep -Po '(?<=Close[sd]:\s).+')
          for issue; do
            state="$(gh api "repos/{owner}/{repo}/issues/${issue}" --jq '.state' 2> /dev/null)"
            test -n "${state}" || die "${sha}: invalid issue '${issue}'"
            test "${state}" = 'open' || die "${sha}: issue '${issue}' already closed"
          done
        done
